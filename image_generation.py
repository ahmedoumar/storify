import openai
import requests
from PIL import Image
from io import BytesIO
import streamlit as st

@st.cache_data
def generate_story_image_dalle(prompt, size="512x512"):
    """
    Generate an image using DALL-E based on the given prompt.
    
    Args:
    prompt (str): The text prompt to generate the image from.
    size (str): The size of the image to generate. Options are "256x256", "512x512", or "1024x1024".
    
    Returns:
    PIL.Image.Image or None: The generated image as a PIL Image object, or None if generation failed.
    """
    try:
        response = openai.Image.create(
            prompt=prompt,
            n=1,
            size=size
        )
        image_url = response['data'][0]['url']
        image_response = requests.get(image_url)
        img = Image.open(BytesIO(image_response.content))
        return img
    except Exception as e:
        st.error(f"Failed to generate image: {str(e)}")
        return None

def preprocess_prompt(story_content, max_length=1000):
    """
    Preprocess the story content to create a suitable prompt for image generation.
    
    Args:
    story_content (str): The full story content.
    max_length (int): The maximum length of the prompt.
    
    Returns:
    str: A preprocessed prompt suitable for image generation.
    """
    # Extract the first few sentences (adjust as needed)
    sentences = story_content.split('.')[:3]
    shortened_content = '. '.join(sentences)
    
    # Create a prompt focusing on visual elements
    prompt = f"Create an image that captures the essence of this story: {shortened_content}"
    
    # Ensure the prompt doesn't exceed the max length
    if len(prompt) > max_length:
        prompt = prompt[:max_length-3] + "..."
    
    return prompt

@st.cache_data
def generate_story_image(story_content, size="512x512"):
    """
    Generate an image based on the story content.
    
    Args:
    story_content (str): The full story content.
    size (str): The size of the image to generate.
    
    Returns:
    PIL.Image.Image or None: The generated image as a PIL Image object, or None if generation failed.
    """
    prompt = preprocess_prompt(story_content)
    return generate_story_image_dalle(prompt, size)

def resize_image(image, max_size=(800, 600)):
    """
    Resize an image while maintaining its aspect ratio.
    
    Args:
    image (PIL.Image.Image): The image to resize.
    max_size (tuple): The maximum width and height of the resized image.
    
    Returns:
    PIL.Image.Image: The resized image.
    """
    image.thumbnail(max_size, Image.LANCZOS)
    return image

def apply_watermark(image, watermark_text="Generated by Storify"):
    """
    Apply a text watermark to an image.
    
    Args:
    image (PIL.Image.Image): The image to watermark.
    watermark_text (str): The text to use as a watermark.
    
    Returns:
    PIL.Image.Image: The watermarked image.
    """
    from PIL import ImageDraw, ImageFont
    
    draw = ImageDraw.Draw(image)
    width, height = image.size
    
    # You may need to adjust this path to where your font file is located
    try:
        font = ImageFont.truetype("arial.ttf", 20)
    except IOError:
        font = ImageFont.load_default()
    
    textwidth, textheight = draw.textsize(watermark_text, font)
    
    margin = 10
    x = width - textwidth - margin
    y = height - textheight - margin
    
    draw.text((x, y), watermark_text, font=font, fill=(255, 255, 255, 128))
    
    return image
